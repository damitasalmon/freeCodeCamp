{"index.js":"/*\n  ES6: Use class Syntax to Define a Constructor Function\n  ES6 provides a new syntax to help create objects, using the keyword class.\n\n  This is to be noted, that the class syntax is just a syntax, and not a full-fledged class based implementation of object oriented paradigm, unlike in languages like Java, or Python, or Ruby etc.\n\n  In ES5, we usually define a constructor function, and use the new keyword to instantiate an object.\n\n  var SpaceShuttle = function(targetPlanet){\n    this.targetPlanet = targetPlanet;\n  }\n  var zeus = new SpaceShuttle('Jupiter');\n  The class syntax simply replaces the constructor function creation:\n\n  class SpaceShuttle {\n    constructor(targetPlanet){\n      this.targetPlanet = targetPlanet;\n    }\n  }\n  const zeus = new SpaceShuttle('Jupiter');\n  Notice that the class keyword declares a new function, and a constructor was added, which would be invoked when new is called - to create a new object.\n\n\n  Use class keyword and write a proper constructor to create the Vegetable class.\n\n  The Vegetable lets you create a vegetable object, with a property name, to be passed to constructor. \n*/\nfunction makeClass() {\n  \"use strict\";\n  /* Alter code below this line */\nclass Vegetable{\n  constructor(name){\n    this.name = name;\n  }\n}\n  /* Alter code above this line */\n  return Vegetable;\n}\nconst Vegetable = makeClass();\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // => should be 'carrot'"}