{"index.js":"/* ES6: Use getters and setters to Control Access to an Object\nYou can obtain values from an object, and set a value of a property within an object.\n\nThese are classically called getters and setters.\n\nGetter functions are meant to simply return (get) the value of an object's private variable to the user without the user directly accessing the private variable.\n\nSetter functions are meant to modify (set) the value of an object's private variable based on the value passed into the setter function. This change could involve calculations, or even overwriting the previous value completely.\n\nclass Book {\n  constructor(author) {\n    this._author = author;\n  }\n  // getter\n  get writer(){\n    return this._author;\n  }\n  // setter\n  set writer(updatedAuthor){\n    this._author = updatedAuthor;\n  }\n}\nconst lol = new Book('anonymous');\nconsole.log(lol.writer);\nlol.writer = 'wut';\nconsole.log(lol.writer);\nNotice the syntax we are using to invoke the getter and setter - as if they are not even functions.\n\nGetters and setters are important, because they hide internal implementation details.\n\n\n*/\nfunction makeClass() {\n  \"use strict\";\n  /* Alter code below this line */\nclass Thermostat{\n  constructor(fahrenheit){\n    this.temperature = fahrenheit;\n  }\n\n  get Celsius(){\n    return this.temperature;\n  }\n\n  set Celsius(temperature) {\n    this.temperature = 5/9 * (this.temperature - 32);\n  }\n}\n  /* Alter code above this line */\n  return Thermostat;\n}\nconst Thermostat = makeClass();\nconst thermos = new Thermostat(76); // setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in C\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in C"}