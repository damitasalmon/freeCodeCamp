{"index.js":"/*ES6: Use export to Reuse a Code Block\nIn the previous challenge, you learned about import and how it can be leveraged to import small amounts of code from large files. In order for this to work, though, we must utilize one of the statements that goes with import, known as export. When we want some code - a function, or a variable - to be usable in another file, we must export it in order to import it into another file. Like import, export is a non-browser feature.\n\nThe following is what we refer to as a named export. With this, we can import any code we export into another file with the import syntax you learned in the last lesson. Here's an example:\n\nconst capitalizeString = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nexport { capitalizeString } //How to export functions.\nexport const foo = \"bar\"; //How to export variables.\nAlternatively, if you would like to compact all your export statements into one line, you can take this approach:\n\nconst capitalizeString = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nconst foo = \"bar\";\nexport { capitalizeString, foo }\nEither approach is perfectly acceptable.\n\n*/\n\"use strict\";\nexport const foo = \"bar\";\nexport const bar = \"foo\";\n"}