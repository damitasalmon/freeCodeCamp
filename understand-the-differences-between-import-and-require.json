{"index.js":"/*ES6: Understand the Differences Between import and require\nIn the past, the function require() would be used to import the functions and code in external files and modules. While handy, this presents a problem: some files and modules are rather large, and you may only need certain code from those external resources.\n\nES6 gives us a very handy tool known as import. With it, we can choose which parts of a module or file to load into a given file, saving time and memory.\n\nConsider the following example. Imagine that math_array_functions has about 20 functions, but I only need one, countItems, in my current file. The old require() approach would force me to bring in all 20 functions. With this new import syntax, I can bring in just the desired function, like so:\n\nimport { countItems } from \"math_array_functions\"\nA description of the above code:\n\nimport { function } from \"file_path_goes_here\"\n// We can also import variables the same way!\nThere are a few ways to write an import statement, but the above is a very common use-case.\n\nNote\nThe whitespace surrounding the function inside the curly braces is a best practice - it makes it easier to read the import statement.\n\nNote\nThe lessons in this section handle non-browser features. import, and the statements we introduce in the rest of these lessons, won't work on a browser directly. However, we can use various tools to create code out of this to make it work in browser.\n\nNote\nIn most cases, the file path requires a ./ before it; otherwise, node will look in the node_modules directory first trying to load it as a dependency.*/\n\n\"use strict\";\ncapitalizeString(\"hello!\");\n\nimport { capitalizeString } from \"string_functions\""}